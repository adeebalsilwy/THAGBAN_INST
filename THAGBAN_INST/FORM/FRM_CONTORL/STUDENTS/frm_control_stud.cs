using DevExpress.ClipboardSource.SpreadsheetML;
using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using THAGBAN_INST.DATA;
using THAGBAN_INST.FORM.FRM_MANG_STUD.students;

namespace THAGBAN_INST.FORM.FRM_CONTORL.STUDENTS
{
    public partial class frm_control_stud : DevExpress.XtraEditors.XtraUserControl
    {

        db_max_instEntities con = new db_max_instEntities();
        tost toast = new tost();
        dialge dialge = new dialge();

        public int stud_id = 0;
        public int spical_id = 0;
        public int years_id = 0;
        private IEnumerable<TBL_STUDENTS> data;

        public frm_control_stud()
        {
            InitializeComponent();
            get_data();
            // get_data();
            get_sp();
            get_years();



        }

        private void btn_save_Click(object sender, EventArgs e)
        {
            
        }

        public void get_data()
        {

            com_spical.DataSource = con.TBL_SPECIAL.ToList();
            com_spical.DisplayMember = "SPEC_NAME";
            com_spical.ValueMember = "SPEC_ID";
           // lbl_count.Text = con.TBL_STUD_SPEC.Where(w => w.SPEC_ID == spical_id && w.TBL_STUDENTS.STUD_STATE == true).Count().ToString();




        }
       
        void get_sp()
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            THAGBAN_INST.DATA.db_max_instEntities dbContext = new THAGBAN_INST.DATA.db_max_instEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.


            if (spical_id != 0)
            {
                var tenp = (from stud in dbContext.TBL_STUDENTS
                            join sp in dbContext.TBL_STUD_SPEC
                            on stud.STUD_ID equals sp.STUD_ID
                            join spec in dbContext.TBL_SPECIAL.Where(w => w.SPEC_ID == spical_id)
                            on sp.SPEC_ID equals spec.SPEC_ID
                            select new
                            {
                                stud.STUD_ID,
                                stud.STUD_NAME,
                                stud.STUD_GENDER,
                                stud.STUD_ADDRESS,
                                stud.STUD_LNAME,
                                stud.STUD_DATE,
                                stud.STUD_PHONE,
                                stud.STUD_STATE,
                                spec.SPEC_NAME,
                                sp.STUD_SPEC_YEAR
                            }).ToList();
                gridControl1.DataSource = tenp.Where(w => w.STUD_STATE == true);
                lbl_count.Text = con.TBL_STUD_SPEC.Where(w => w.SPEC_ID == spical_id && w.TBL_STUDENTS.STUD_STATE == true).Count().ToString();

            }
            else {

                var tenp1 = (from stud in dbContext.TBL_STUDENTS
                             join sp in dbContext.TBL_STUD_SPEC
                             on stud.STUD_ID equals sp.STUD_ID
                             join spec in dbContext.TBL_SPECIAL
                             on sp.SPEC_ID equals spec.SPEC_ID
                             select new
                             {
                                 stud.STUD_ID,
                                 stud.STUD_NAME,
                                 stud.STUD_GENDER,
                                 stud.STUD_ADDRESS,
                                 stud.STUD_LNAME,
                                 stud.STUD_DATE,
                                 stud.STUD_PHONE,
                                 stud.STUD_STATE,
                                 spec.SPEC_NAME,
                                 sp.STUD_SPEC_YEAR
                             }).ToList();

                // Bind data to control when loading complete
                gridControl1.DataSource = tenp1.Where(w => w.STUD_STATE == true);
                lbl_count.Text = con.TBL_STUD_SPEC.Where(w => w.TBL_STUDENTS.STUD_STATE == true).Count().ToString();

            }
        }
        void get_sele()
        {
            if (gridView2.SelectedRowsCount > 0)
            {


                
                stud_id = Convert.ToInt32(gridView2.GetFocusedRowCellValue("STUD_ID").ToString());
                // holidaytype_id= Convert.ToInt32(gridView2.GetFocusedRowCellValue("DEPT_ID").ToString());
               
            }
        }
        private void btn_edite_Click(object sender, EventArgs e)
        {
            frm_add_students frm = new frm_add_students();
            frm.stud_id = stud_id;


            frm.spical_id = spical_id;
            frm.btn_save.Text = "تعديل";
            frm.ShowDialog();


            get_sp();
        }

        void delete()
        {
            if (stud_id != 0)
            {
                try
                {
                    DialogResult res = MessageBox.Show("هل تريد تاكيد الحذف ", "تحذير الحذف ", MessageBoxButtons.OKCancel, MessageBoxIcon.Error);
                    if (res == DialogResult.OK)
                    {
                        TBL_STUDENTS del_cle = con.TBL_STUDENTS.Find(stud_id);
                        // del_doc.DOC_ID = holiday_type_id;

                        con.TBL_STUDENTS.Remove(del_cle);
                        con.SaveChanges();
                        adl.NotifictionUser notifiction = new adl.NotifictionUser(THAGBAN_INST.Properties.Resources.DeleteNotificationText, THAGBAN_INST.Properties.Resources.Delete_32px);
                        notifiction.Show();
                    }
                    get_sp();
                } catch (Exception ex) { }
            }
        }
        private void gridView2_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            get_sele();
        }

        private void btn_delete_Click(object sender, EventArgs e)
        {
            delete();
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            get_sp();
        }

        void ExportToExcela(IEnumerable<TBL_STUDENTS> inputCollection)
        {
            this.data = inputCollection;

            try
            {
                FolderBrowserDialog folder = new FolderBrowserDialog();
                var rs = folder.ShowDialog();
                if (rs == DialogResult.OK)
                {
                   


                    var fullpath = folder.SelectedPath.ToString();
                    gridControl1.ExportToXls(fullpath);
                    MessageBox.Show("تم النسخ الاحتياطي بنجاح");

                }
            }
            catch
            {
                MessageBox.Show("خطأ , لا يمكن النسخ الاحتياطي الى المسار المحدد, الرجاء تحديد مسار مختلف, تذكر لا تحدد القرص C");
            }
            }

    
        
        void open_dialg_path()
        {
            try
            {
                FolderBrowserDialog folder = new FolderBrowserDialog();
                var rs = folder.ShowDialog();
                if (rs == DialogResult.OK)
                {
                    //db_max_instEntities db = new db_max_instEntities();
                    ////  string dbname = db.Database.Connection.Database;
                    //// string dbBackUp = "EPSback" + DateTime.Now.ToString("yyyyMMddHHmm");
                    //var fullpath = folder.SelectedPath.ToString();/*+ dbBackUp + ".bak";*/
                    //string sqlCommand = @"BACKUP DATABASE [{0}] TO  DISK = '" + fullpath + "' WITH NOFORMAT, NOINIT,  NAME = N'DBEPS', SKIP, NOREWIND, NOUNLOAD,  STATS = 10";
                    //int path = db.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, string.Format(sqlCommand, dbname, dbBackUp));
                    //MessageBox.Show("تم النسخ الاحتياطي بنجاح");

                  
                    var fullpath = folder.SelectedPath.ToString();
                    gridControl1.ExportToCsv(fullpath);
                    //  string sqlCommand = @"BACKUP DATABASE [{0}] TO  DISK = '" + fullpath + "' WITH NOFORMAT, NOINIT,  NAME = N'DBEPS', SKIP, NOREWIND, NOUNLOAD,  STATS = 10";
                    // int path = db.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, string.Format(sqlCommand, dbname, dbBackUp));
                    MessageBox.Show("تم النسخ الاحتياطي بنجاح");
                }
            }
            catch
            {
                MessageBox.Show("خطأ , لا يمكن النسخ الاحتياطي الى المسار المحدد, الرجاء تحديد مسار مختلف, تذكر لا تحدد القرص C");
            }
            
        }
        private void simpleButton2_Click(object sender, EventArgs e)
        {
            open_dialg_path();


        }

        private void com_spical_SelectionChangeCommitted(object sender, EventArgs e)
        {
            if (com_spical.SelectedValue != null)
            {
                spical_id = Convert.ToInt32(com_spical.SelectedValue.ToString());
                get_years();
                get_sp();
            }
        }

        private void com_yeares_SelectionChangeCommitted(object sender, EventArgs e)
        {
            
        }

        private void com_spical_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        void get_years()
        {
            com_years.DataSource = con.TBL_YEARS.ToList();
            com_years.DisplayMember = "YEAR_NAME";
            com_years.ValueMember = "YEAR_ID";
        }

        void get_stud_years()
        {
         
        }

    }
}
