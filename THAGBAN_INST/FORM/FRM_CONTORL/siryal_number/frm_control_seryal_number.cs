using DevExpress.ClipboardSource.SpreadsheetML;
using DevExpress.XtraEditors;
using DevExpress.XtraReports.UI;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Entity;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using THAGBAN_INST.DATA;
using THAGBAN_INST.FORM.FORM_MANG_STUD.reports;
using THAGBAN_INST.FORM.FRM_CONTORL.siryal_number;
using THAGBAN_INST.FORM.FRM_MANG_STUD.students;
using DevExpress.XtraPrinting;


namespace THAGBAN_INST.FORM.FRM_CONTORL
{
    public partial class frm_control_seryal_number : DevExpress.XtraEditors.XtraUserControl
    {

        db_max_instEntities con = new db_max_instEntities();
        tost toast = new tost();
        dialge dialge = new dialge();

        public int stud_id = 0;
        public int spical_id = 0;
        public int years_id = 0;
        private IEnumerable<TBL_STUDENTS> data;

        public frm_control_seryal_number()
        {
            InitializeComponent();
            get_data();
            // get_data();
            get_data_spic();


            refrush();
            // This line of code is generated by Data Source Configuration Wizard

        }

        void refrush()
        {
            // Instantiate a new DBContext
            THAGBAN_INST.DATA.db_max_instEntities dbContext = new THAGBAN_INST.DATA.db_max_instEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.TBL_SIRYAL_STUDENTS.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                gridControl1.DataSource = dbContext.TBL_SIRYAL_STUDENTS.Local.ToBindingList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());
            lbl_count.Text = con.TBL_SIRYAL_STUDENTS.Count().ToString();

        }
        private void btn_save_Click(object sender, EventArgs e)
        {
            frm_add_siryal frm = new frm_add_siryal();
            frm.ShowDialog();
            refrush();
        }

        public void get_data()
        {

            com_spical.DataSource = con.TBL_SPECIAL.ToList();
            com_spical.DisplayMember = "SPEC_NAME";
            com_spical.ValueMember = "SPEC_ID";

            com_years_mark.DataSource = con.TBL_YEARS_MARK.OrderByDescending(w => w.YEARS_DATA).ToList();
            com_years_mark.DisplayMember = "YEARS_DATA";
            com_years_mark.ValueMember = "ID";
            // lbl_count.Text = con.TBL_STUD_SPEC.Where(w => w.SPEC_ID == spical_id && w.TBL_STUDENTS.STUD_STATE == true).Count().ToString();




        }
        void get_years()
        {
            //com_yeares.DataSource = con.TBL_YEARS.Where(w => w.SPEC_ID == spical_id).ToList();
            //com_yeares.DisplayMember = "YEAR_NAME";
            //com_yeares.ValueMember = "YEAR_ID";
            //var t = (from stud in con.TBL_STUD_SPEC join
            //        sp in con.TBL_SPECIAL on stud.SPEC_ID equals sp.SPEC_ID
            //         join years in con.TBL_YEARS on sp.SPEC_ID equals
            //         years.SPEC_ID
            //         select stud).ToList();
                 
        }
        //void get_sp()
        //{
        //    // This line of code is generated by Data Source Configuration Wizard
        //    // Instantiate a new DBContext
        //    THAGBAN_INST.DATA.db_max_instEntities dbContext = new THAGBAN_INST.DATA.db_max_instEntities();
        //    // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.


        //    if (spical_id != 0)
        //    {
        //        var tenp = (from stud in dbContext.TBL_STUDENTS
        //                    join sp in dbContext.TBL_STUD_SPEC
        //                    on stud.STUD_ID equals sp.STUD_ID
        //                    join spec in dbContext.TBL_SPECIAL.Where(w => w.SPEC_ID == spical_id)
        //                    on sp.SPEC_ID equals spec.SPEC_ID
        //                    select new
        //                    {
        //                        stud.STUD_ID,
        //                        stud.STUD_NAME,
        //                        stud.STUD_GENDER,
        //                        stud.STUD_ADDRESS,
        //                        stud.STUD_LNAME,
        //                        stud.STUD_DATE,
        //                        stud.STUD_PHONE,
        //                        stud.STUD_STATE,
        //                        spec.SPEC_NAME,
        //                        sp.STUD_SPEC_YEAR
        //                    }).ToList();
        //        gridControl1.DataSource = tenp.Where(w => w.STUD_STATE == true);
        //        lbl_count.Text = con.TBL_STUD_SPEC.Where(w => w.SPEC_ID == spical_id && w.TBL_STUDENTS.STUD_STATE == true).Count().ToString();

        //    }
        //    else {

        //        var tenp1 = (from stud in dbContext.TBL_STUDENTS
        //                     join sp in dbContext.TBL_STUD_SPEC
        //                     on stud.STUD_ID equals sp.STUD_ID
        //                     join spec in dbContext.TBL_SPECIAL
        //                     on sp.SPEC_ID equals spec.SPEC_ID
        //                     select new
        //                     {
        //                         stud.STUD_ID,
        //                         stud.STUD_NAME,
        //                         stud.STUD_GENDER,
        //                         stud.STUD_ADDRESS,
        //                         stud.STUD_LNAME,
        //                         stud.STUD_DATE,
        //                         stud.STUD_PHONE,
        //                         stud.STUD_STATE,
        //                         spec.SPEC_NAME,
        //                         sp.STUD_SPEC_YEAR
        //                     }).ToList();

        //        // Bind data to control when loading complete
        //        gridControl1.DataSource = tenp1.Where(w => w.STUD_STATE == true);
        //        lbl_count.Text = con.TBL_STUD_SPEC.Where(w => w.TBL_STUDENTS.STUD_STATE == true).Count().ToString();

        //    }
        //}
       void  get_data_spic()
        {

            // Bind data to control when loading complete
            spical_id = Convert.ToInt32(com_spical.SelectedValue.ToString());
            years_id = Convert.ToInt32(com_years_mark.SelectedValue.ToString());
                gridControl1.DataSource = con.TBL_SIRYAL_STUDENTS.Where(w=>w.SPIC_ID==spical_id &&w.SIRYAL_YEARS==years_id).ToList();
            lbl_count.Text =con.TBL_SIRYAL_STUDENTS.Where(w => w.SPIC_ID == spical_id && w.SIRYAL_YEARS == years_id).Count().ToString();


        }
        void get_sele()
        {
            if (gridView2.SelectedRowsCount > 0)
            {


                
                stud_id = Convert.ToInt32(gridView2.GetFocusedRowCellValue("STUD_ID").ToString());
                // holidaytype_id= Convert.ToInt32(gridView2.GetFocusedRowCellValue("DEPT_ID").ToString());
               
            }
        }
        private void btn_edite_Click(object sender, EventArgs e)
        {
            report_siryal repors = new report_siryal();
            List<TBL_SIRYAL_STUDENTS> list = new List<TBL_SIRYAL_STUDENTS>();

            for (int i = 0; i < gridView2.RowCount; i++)
            {
                list.Add(gridView2.GetRow(i) as TBL_SIRYAL_STUDENTS);
            }
            repors.DataSource = list;
            repors.DataMember = "";
            //int ints_id = THAGBAN_INST.Properties.Settings.Default.inst_id;
            //adl.method method = new adl.method();
            //method.data = con.TBL_INST.Find(ints_id).INST_LOGO;

            //repors.Watermark.Image = Image.FromStream(method.convert_image());
            repors.ShowRibbonPreview();
        }

        private void gridView2_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            get_sele();
        }

        private void btn_delete_Click(object sender, EventArgs e)
        {
        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            refrush();
        }

        void ExportToExcela(IEnumerable<TBL_STUDENTS> inputCollection)
        {
            this.data = inputCollection;

            try
            {
                FolderBrowserDialog folder = new FolderBrowserDialog();
                var rs = folder.ShowDialog();
                if (rs == DialogResult.OK)
                {
                   


                    var fullpath = folder.SelectedPath.ToString();
                    gridControl1.ExportToXls(fullpath);
                    MessageBox.Show("تم النسخ الاحتياطي بنجاح");

                }
            }
            catch
            {
                MessageBox.Show("خطأ , لا يمكن النسخ الاحتياطي الى المسار المحدد, الرجاء تحديد مسار مختلف, تذكر لا تحدد القرص C");
            }
            }

    
        
        void open_dialg_path()
        {
            try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog();
                saveFileDialog.Filter = "xlsx Files (*.xls)|*.xls";
                if (saveFileDialog.ShowDialog() == DialogResult.OK)
                {
                    var fullPath = saveFileDialog.FileName;

                    // Set the PrintHeader option to include column headers in the exported file
                    gridView2.ExportToXls(fullPath);
                    Process.Start(fullPath);
                    MessageBox.Show("تم التصدير بنجاح");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("خطأ، لا يمكن النسخ الاحتياطي إلى المسار المحدد. الرجاء تحديد مسار مختلف. تذكر ألا تحدد القرص C" + Environment.NewLine + ex.Message);
            }


        }
        private void simpleButton2_Click(object sender, EventArgs e)
        {
            open_dialg_path();


        }
        private void btnExport_Click(object sender, EventArgs e)
        {
            var options = new DevExpress.XtraPrinting.XlsxExportOptions
            {
                ExportMode = DevExpress.XtraPrinting.XlsxExportMode.SingleFile,
                SheetName = "MyExportedData",
                ShowGridLines = true,
                TextExportMode = DevExpress.XtraPrinting.TextExportMode.Value,
                ExportHyperlinks = true
            };

            //var helper = new DevExpress.XtraPrinting.XlsxExportHelper(gridView2);
            //helper.ExportToFile("C:\\MyExportedData.xlsx", options);
        }

        private void com_spical_SelectionChangeCommitted(object sender, EventArgs e)
        {
            if (com_spical.SelectedValue != null)
            {
                spical_id = Convert.ToInt32(com_spical.SelectedValue.ToString());
                get_years();
                get_data_spic();
            }
        }

        private void com_yeares_SelectionChangeCommitted(object sender, EventArgs e)
        {
            
        }

        private void com_years_mark_SelectionChangeCommitted(object sender, EventArgs e)
        {
            get_data_spic();
        }
    }
}
